// <auto-generated />
using System;
using API.APIDataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace API.Migrations
{
    [DbContext(typeof(EinsteinContext))]
    [Migration("20210226110530_AddUserIdentityToPost")]
    partial class AddUserIdentityToPost
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0-rc.1.20451.13");

            modelBuilder.Entity("API.APIDataLayer.Post", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GroupID")
                        .HasColumnType("integer");

                    b.Property<string>("ImageName")
                        .HasColumnType("text");

                    b.Property<int>("Like")
                        .HasColumnType("integer");

                    b.Property<int?>("PostGroupGroupID")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<bool>("ShowInSlider")
                        .HasColumnType("boolean");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("UserID")
                        .HasColumnType("integer");

                    b.Property<string>("UserIdentity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Visit")
                        .HasColumnType("integer");

                    b.HasKey("PostID");

                    b.HasIndex("PostGroupGroupID");

                    b.HasIndex("UserID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("API.APIDataLayer.PostComment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("PostID")
                        .HasColumnType("integer");

                    b.HasKey("CommentID");

                    b.HasIndex("PostID");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("API.APIDataLayer.PostGroup", b =>
                {
                    b.Property<int>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("GroupTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("GroupID");

                    b.ToTable("PostGroups");
                });

            modelBuilder.Entity("API.APIDataLayer.PushSubscription", b =>
                {
                    b.Property<int>("pushID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("endpoint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("expirationTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("pushID");

                    b.ToTable("PushSubscription");
                });

            modelBuilder.Entity("API.APIDataLayer.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("character varying(600)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Identity")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.APIDataLayer.Post", b =>
                {
                    b.HasOne("API.APIDataLayer.PostGroup", "PostGroup")
                        .WithMany("Posts")
                        .HasForeignKey("PostGroupGroupID");

                    b.HasOne("API.APIDataLayer.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserID");

                    b.Navigation("PostGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.APIDataLayer.PostComment", b =>
                {
                    b.HasOne("API.APIDataLayer.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("API.APIDataLayer.PushSubscription", b =>
                {
                    b.OwnsOne("API.APIDataLayer.Keys", "keys", b1 =>
                        {
                            b1.Property<int>("PushSubscriptionpushID")
                                .HasColumnType("integer");

                            b1.Property<string>("auth")
                                .HasColumnType("text");

                            b1.Property<string>("p256dh")
                                .HasColumnType("text");

                            b1.HasKey("PushSubscriptionpushID");

                            b1.ToTable("PushSubscription");

                            b1.WithOwner()
                                .HasForeignKey("PushSubscriptionpushID");
                        });

                    b.Navigation("keys");
                });

            modelBuilder.Entity("API.APIDataLayer.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("API.APIDataLayer.PostGroup", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("API.APIDataLayer.User", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
